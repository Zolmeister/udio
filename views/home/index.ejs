<button onclick="recordd(this);" id='rec'>record</button>
<input id='email' placeholder='email'>
<div class='recs'></div>
<style>
audio {
    display: block;
  }
  .rr {
    margin: 50px;
    padding: 20px;
  }
  .stopped {
    background: black;
  }
  .recording {
background: red !important;
  }
  .recs {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 450px;
    box-shadow: 0 0 10px;
    margin-left: -200px;
    margin-top: 50px;
  }
  #rec {
    background: black;
    color: yellow;
    box-shadow: 0 0 20px red;
    position: absolute;
    left: 50%;
    top: 30%;
    margin-top: -150px;
    margin-left: -150px;
    width: 300px;
    height: 300px;
    border-radius: 5000px;
    border: 10px solid rgba(100,100,100,0.2);
    font-size: 40px;
  }
  #email {
    position: absolute;
    left: 50%;
    top: 30%;
    margin-top: 150px;
    margin-left: -150px;
    width: 300px;
    font-size: 40px;
  }
</style>
<script>
  (function(window) {

    var WORKER_PATH = 'recorderWorker.js';

    var Recorder = function(source, cfg) {
      var config = cfg || {};
      var bufferLen = config.bufferLen || 4096;
      this.context = source.context;
      this.node = (this.context.createScriptProcessor ||
        this.context.createJavaScriptNode).call(this.context,
        bufferLen, 2, 2);
      var worker = new Worker(config.workerPath || WORKER_PATH);
      worker.postMessage({
        command: 'init',
        config: {
          sampleRate: this.context.sampleRate
        }
      });
      var recording = false,
        currCallback;

      this.node.onaudioprocess = function(e) {
        if (!recording) return;
        worker.postMessage({
          command: 'record',
          buffer: [
            e.inputBuffer.getChannelData(0),
            e.inputBuffer.getChannelData(1)
          ]
        });
      }

      this.configure = function(cfg) {
        for (var prop in cfg) {
          if (cfg.hasOwnProperty(prop)) {
            config[prop] = cfg[prop];
          }
        }
      }

      this.record = function() {
        recording = true;
      }

      this.stop = function() {
        recording = false;
      }

      this.clear = function() {
        worker.postMessage({
          command: 'clear'
        });
      }

      this.getBuffer = function(cb) {
        currCallback = cb || config.callback;
        worker.postMessage({
          command: 'getBuffer'
        })
      }

      this.exportWAV = function(cb, type) {
        currCallback = cb || config.callback;
        type = type || config.type || 'audio/wav';
        if (!currCallback) throw new Error('Callback not set');
        worker.postMessage({
          command: 'exportWAV',
          type: type
        });
      }

      worker.onmessage = function(e) {
        var blob = e.data;
        currCallback(blob);
      }

      source.connect(this.node);
      this.node.connect(this.context.destination); //this should not be necessary
    };

    Recorder.forceDownload = function(blob, filename) {
      var url = (window.URL || window.webkitURL).createObjectURL(blob);
      var link = window.document.createElement('a');
      link.href = url;
      link.download = filename || 'output.wav';
      var click = document.createEvent("Event");
      click.initEvent("click", true, true);
      link.dispatchEvent(click);
    }

    window.Recorder = Recorder;

  })(window);
</script>